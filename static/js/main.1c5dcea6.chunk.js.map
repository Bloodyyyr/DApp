{"version":3,"sources":["getWeb3.js","Component/whiteListed.js","Component/ownerSection.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","WhiteListed","state","waitRegister","props","wait","owner","contract","accounts","register","input","document","getElementById","value","push","methods","AttenteDenregistrement","send","from","setState","supprimeWaitList","pop","type","placeholder","id","name","onClick","this","map","tab","Component","OwnerSection","myOwner","myAccounts","myContract","voterRegister","voter","myWaitRegistered","myEtat","etat","registerVoter","address","startProposal","startProposalRegistrationSession","voirEnumParString","call","status","endProposal","endProposalRegistrationSession","startVotingSession","endVotingSession","comptage","tallyVotes","chiff","App","numberTotalProposal","countproposal","proposal","winnersDescription","waitRegistered","proposalArray","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","alert","error","count","registerProposal","description","proposalNumber","nombretotaldeproposition","voting","propositionvoté","doTheVote","propositionGagnante","winningProposalID","getwinneur","voirDescription","winneur","className","tableau","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c5dcea6.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\n\r\nclass WhiteListed extends Component {\r\n    \r\n    state = {\r\n\r\n        waitRegister: this.props.wait,\r\n        owner: this.props.owner,\r\n        contract: this.props.contract,\r\n        accounts: this.props.accounts,\r\n\r\n    }\r\n\r\n    // Enregistrement dans le tabealu d'attente \r\n    register = async () => {\r\n        const { contract, accounts, waitRegister } = this.state\r\n        // Sélectionner l'élément input et récupérer sa valeur\r\n        var input = document.getElementById(\"in\").value;\r\n        \r\n        waitRegister.push(input);\r\n        \r\n        await contract.methods.AttenteDenregistrement(input).send({from:accounts[0]})\r\n        this.setState({waitRegister})\r\n        \r\n    }\r\n    // Suppréssion des enregister\r\n    supprimeWaitList = () => {\r\n        const { waitRegister } = this.state\r\n\r\n        waitRegister.pop()\r\n\r\n        this.setState({waitRegister})\r\n\r\n    }\r\n    \r\n    \r\n\r\n    render(){\r\n        \r\n        \r\n    return(\r\n        <div>\r\n            <p><evidence>Etape 1</evidence>: Indiqué votre adresse Ethereum pour etre enregistrer </p>\r\n            <input type=\"text\" placeholder=\"Entrée votre adresse Ethereum\" id=\"in\"></input>\r\n            <button name=\"boutton d'enregistrement\" type=\"button\" onClick={ this.register }>Enregistrement de votre addresse</button>\r\n            <p>Liste des addresse en attente d'enregistrement</p>\r\n            { this.state.waitRegister.map((tab) => { return (<div>{tab}</div>); }) }\r\n            <button name=\"Supprimé le dernier element de la liste\" onClick={ this.supprimeWaitList }> Supprimé</button>\r\n            <p> Si votre addresse n'est plus dans ce tableau c'est que vous ete enregistrez </p>\r\n            <hr></hr>\r\n\t\t</div>\r\n\r\n        \r\n    )\r\n    }\r\n}\r\n\r\nexport default WhiteListed;","import React, { Component } from \"react\";\r\nimport WhiteListed from \"./whiteListed\"\r\n\r\nclass OwnerSection extends Component {\r\n\r\n\tstate = {\r\n\t\tmyOwner: this.props.owner,\r\n\t\tmyAccounts: this.props.accounts,\r\n\t\tmyContract: this.props.contract,\r\n\t\tvoterRegister: this.props.voter,\r\n\t\tmyWaitRegistered: this.props.wait,\r\n\t\tmyEtat: this.props.etat,\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\r\n\t// Enregistrement des votant\r\n\tregisterVoter = async () => {\r\n\r\n\t\tconst  { myAccounts, myContract, voterRegister, myWaitRegistered} = this.state\r\n\t\tconst address = document.getElementById(\"on\").value;\r\n\r\n\t\tawait myContract.methods.registerVoter(address).send({from: myAccounts[0]});\r\n\t\tmyWaitRegistered.pop();\r\n\t\tvoterRegister.push(address);\r\n\t\t\r\n\t\tthis.setState({ voterRegister, myWaitRegistered })\r\n\t}\r\n\r\n\t// Debut de la session de proposition\r\n\tstartProposal = async () => {\r\n\r\n\t\tconst { myContract, myAccounts } = this.state;\r\n\t\r\n\t\tawait myContract.methods.startProposalRegistrationSession().send({from: myAccounts[0]});\r\n\r\n\t\tlet status = await myContract.methods.voirEnumParString().call();\r\n\t\t\r\n\t\t\r\n\t\tthis.setState({ myEtat: status })\r\n\t  }\r\n\r\n\t  //Fin de la Session de proposition \r\n  \tendProposal = async () => {\r\n\r\n    \tconst { myContract, myAccounts } = this.state;\r\n\r\n    \tawait myContract.methods.endProposalRegistrationSession().send({from: myAccounts[0]})\r\n\r\n\t\tlet status =   await myContract.methods.voirEnumParString().call(); \r\n\r\n\t\tthis.setState({ myEtat: status })\r\n  \t}\r\n\r\n\t  //Début de la session de vote \r\n\tstartVotingSession = async () => {\r\n\r\n    \tconst { myContract, myAccounts } = this.state;\r\n\r\n    \tawait myContract.methods.startVotingSession().send({from: myAccounts[0]})\r\n\r\n\t\tlet status =  await myContract.methods.voirEnumParString().call();\r\n\r\n\t\tthis.setState({ myEtat: status })\r\n  \t}\r\n\r\n  \t//Fin de la Session de vote\r\n  \tendVotingSession = async () => {\r\n\r\n    \tconst { myContract, myAccounts } = this.state;\r\n\r\n    \tawait myContract.methods.endVotingSession().send({from: myAccounts[0]})\r\n\t\tlet status =  await myContract.methods.voirEnumParString().call();\r\n\r\n\t\tthis.setState({ myEtat: status })\r\n \t}\r\n\t\r\n\t// Calcul de la proposition gagnante\r\n  \tcomptage = async () => {\r\n\r\n\t\tconst { myContract, myAccounts } = this.state;\r\n\t\r\n\t\tawait myContract.methods.tallyVotes().send({from: myAccounts[0]})\r\n\r\n\t\tlet status =  await myContract.methods.voirEnumParString().call();\r\n\r\n\t\tthis.setState({ myEtat: status })\r\n  \t}\r\n\t\r\n\t\r\n\t\r\n\trender() {\r\n\t\t\r\n\r\n\t\tconst { myOwner, myContract, myAccounts, voterRegister, myWaitRegistered, myEtat }= this.state\r\n\r\n\t\t\r\n\r\n\t\tif(this.state.myAccounts == this.state.myOwner){\r\n\t\r\n\t\treturn(\r\n\t\t\t\r\n\t\t\t<div>\r\n\t\t\t\t<h1> Systeme de vote </h1>\r\n      \t\t\t<p>Etat du contract: { myEtat }</p>\r\n\t\t\t\t<WhiteListed owner={ myOwner }\r\n\t\t\t\tcontract={ myContract }\r\n\t\t\t\taccounts={ myAccounts }\r\n\t\t\t\twait={ myWaitRegistered }\r\n\t\t\t\tmyEtat={ myEtat }\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t\t<p> Session proprietaire du contract Enregistre les votant </p>\r\n\t\t\t\t<input type=\"text\" placeholder=\"Entrée votre adresse Ethereum\" id=\"on\"></input>\r\n            \t<button name=\"boutton d'enregistrement\" type=\"button\" onClick={ this.registerVoter } > Validation a la blockchain</button>\r\n\t\t\t\t{ voterRegister.map((chiff) => { return (  <div>{chiff}</div> )}) }\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<p>Session d'enregistrement des proposition</p>\r\n\t\t\t\t<button name=\"Debut session proposition\" onClick={ this.startProposal }>Début</button>\r\n\t\t\t\t<button name=\"fin de la session proposition\" onClick={ this.endProposal }>Fin</button>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<p>Session de Vote</p>\r\n\t\t\t\t<button name=\"Debut de la session vote\" onClick={ this.startVotingSession }>Début</button>\r\n      \t\t\t<button name=\"Fin de la session de vote\" onClick={ this.endVotingSession }>Fin</button>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<button name=\"Choix de la proposition gagnante\" onClick={ this.comptage }>Compte</button>\r\n\t\t\t\t<hr></hr>\r\n\t\t\t</div>\r\n\t\t)}else{\r\n\t\t\treturn(<div>\r\n\t\t\t<h1> Systeme de vote </h1>\r\n      \t\t\t<p>Etat du contract: { myEtat }</p>\r\n\t\t\t<WhiteListed/>\r\n\t\t\t\t<h1>Acces Proprietaire</h1>\r\n\t\t\t\t<hr></hr>\r\n\t\t\t</div>)\r\n\t\t}\r\n\r\n\t\t}\r\n\r\n}\r\n\r\nexport default OwnerSection;","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport OwnerSection from \"./Component/ownerSection\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null,\n  accounts: null,\n  contract: null,\n  myOwner: null,\n  voterRegister: [],\n  numberTotalProposal: 0,\n  countproposal: 0,\n  proposal: null,\n  winnersDescription: null,\n  waitRegistered: [],\n  proposalArray: [],\n  etat: null\n  };\n\n  \n  // Initialisation a la blockchain\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // let myNumberProposal = await instance.methods.maxIndex().call();\n      let myOwner = await instance.methods.owner().call();\n      let myEtat = await instance.methods.voirEnumParString().call();\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3,\n        accounts,\n        contract: instance,\n        myOwner: myOwner,\n        etat: myEtat\n        },\n        \n        );\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  //Variable qui compte le nombre de proposition\n  count = this.state.countproposal;\n\n  // Enregistration des proposition\n  registerProposal = async () => {\n    const { contract, accounts, proposalArray, numberTotalProposal } = this.state;\n    let description = document.getElementById(\"propo\").value;\n    let proposalNumber = this.count ;\n    let nombretotaldeproposition = numberTotalProposal\n\n    await contract.methods.registerProposal(accounts[0], proposalNumber, description ).send({from: accounts[0]});\n\n    proposalArray.push(description)\n    nombretotaldeproposition ++;\n    this.count ++;\n    \n    this.setState({ countproposal: this.count, proposalArray, numberTotalProposal: nombretotaldeproposition });\n    \n  }\n \n\n  // Enregistrement des vote \n  voting = async () => {\n    const { contract, accounts } = this.state\n\n    let propositionvoté = document.getElementById(\"vote\").value;\n    propositionvoté --;\n    \n    \n    await contract.methods.doTheVote(accounts[0], propositionvoté).send({from: accounts[0]});\n\n  }\n\n  //Affichage  de la proposition gagnante \n  propositionGagnante = async () => {\n    const { contract } = this.state;\n\n    const getwinneur = await contract.methods.winningProposalID().call();\n\n    const winneur = await contract.methods.voirDescription(getwinneur).call();\n\n\n    this.setState({ winnersDescription: winneur })\n\n\n\n  }\n\n   \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    const { myOwner, contract, accounts, voterRegister, waitRegistered, proposalArray, etat } = this.state\n\n    \n    \n    console.log()\n    \n  \n\n    return (\n      <div className=\"App\">\n    \n      \n      \n      <OwnerSection owner={ myOwner }\n      contract= { contract }\n      accounts= { accounts }\n      voter= { voterRegister }\n      wait= { waitRegistered }\n      etat= { etat }\n      \n      />\n      \n\n      <br></br>\n\n      <p> <evidence>Etape 2</evidence>: Enregistrer Votre propositon</p>\n      <input type=\"text\" placeholder=\"Entrez votre Proposition\" id=\"propo\"></input>\n      <button name=\"Validation proposition\" onClick={ this.registerProposal }  >Valider</button>\n      <p> Liste des proposition a voté </p>\n      { proposalArray.map((tableau) => { return (<div>{tableau}</div>)} ) }\n      \n      <hr></hr>\n      \n      <p><evidence>Etape 3</evidence>: Voté pour votre proposition preferé</p>\n      <br></br>\n      <input name=\"proposition a voté\" id=\"vote\" placeholder=\"Proposition Numero\"></input>\n      <button name=\"Confirmé le vote\" onClick={ this.voting }>Voté</button>\n      <hr></hr>\n\n      <button name=\"Affiché le gagnant\" onClick={ this.propositionGagnante }>Gagnant</button>\n      <p>La proposition gagnante est : { this.state.winnersDescription }</p>\n      \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}